import openai
import pandas as pd
import os
import chromadb
from chromadb.utils.embedding_functions import OpenAIEmbeddingFunction
from dotenv import load_dotenv
import sys
import json

'''
Configuration
'''
INPUT_FILE = "../embeddings/embeddings.jsonl"
OUTPUT_FOLDER = "../vector_db/"
EMBEDDING_MODEL = "text-embedding-3-small"

# Loading .env for OpenAI API key
dotenv_path = os.path.join(os.path.dirname(__file__), '..', '.env')
load_dotenv(dotenv_path)
if os.getenv("OPENAI_API_KEY") is not None:
  openai.api_key = os.getenv("OPENAI_API_KEY")
  print ("OPENAI_API_KEY is ready!")
else:
  print("OPENAI_API_KEY environment variable not found, check .env is setup correctly!")
  sys.exit(1)

# Setup embedding function and chroma client
embedding_function = OpenAIEmbeddingFunction(api_key=os.environ.get('OPENAI_API_KEY'), model_name=EMBEDDING_MODEL)
chroma_client = chromadb.PersistentClient(path=OUTPUT_FOLDER)

# Bringing in the data
df = pd.read_json(INPUT_FILE, lines=True).T
print(df.columns)

# Collections
try:
  course_collection = chroma_client.get_collection("course_chunks", embedding_function=embedding_function)
except ValueError:
  course_collection = chroma_client.create_collection(name='course_chunks', embedding_function=embedding_function)

#
for courseID, course_data in df.iterrows():
  embedding_data = course_data[0]
  for chunk in embedding_data:
    course_collection.add(
      ids = [str(courseID)],
      embeddings = chunk["embedding"],
      metadatas = [{"text": chunk["text"]}]
    )
  break